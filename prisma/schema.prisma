generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  email             String          @unique
  id                Int             @id @default(autoincrement())
  githubId          String?         @unique
  bio               String?
  createdAt         DateTime        @default(now())
  firstName         String?
  lastName          String?
  location          String?
  profilePictureUrl String?
  updatedAt         DateTime?       @updatedAt
  role              String?          
  accounts          Account[]
  Applications      Application[]
  Authenticator     Authenticator[]
  MessagesReceived  Message[]       @relation("MessagesReceived")
  MessagesSent      Message[]       @relation("MessagesSent")
  Projects          Project[]
  ReviewsReceived   Review[]        @relation("ReviewsReceived")
  ReviewsWritten    Review[]        @relation("ReviewsWritten")
  sessions          Session[]
  Skills            UserSkill[]
}

model Project {
  id           Int           @id @default(autoincrement())
  clientId     Int
  title        String
  description  String
  budget       Float
  status       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Applications Application[]
  Client       User          @relation(fields: [clientId], references: [id])
  Reviews      Review[]
}

model Application {
  id           Int      @id @default(autoincrement())
  projectId    Int
  freelancerId Int
  coverLetter  String
  status       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Freelancer   User     @relation(fields: [freelancerId], references: [id])
  Project      Project  @relation(fields: [projectId], references: [id])
}

model Message {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  content    String
  createdAt  DateTime @default(now())
  Receiver   User     @relation("MessagesReceived", fields: [receiverId], references: [id])
  Sender     User     @relation("MessagesSent", fields: [senderId], references: [id])
}

model Review {
  id         Int      @id @default(autoincrement())
  projectId  Int
  reviewerId Int
  reviewedId Int
  rating     Int
  comment    String
  createdAt  DateTime @default(now())
  Project    Project  @relation(fields: [projectId], references: [id])
  Reviewed   User     @relation("ReviewsReceived", fields: [reviewedId], references: [id])
  Reviewer   User     @relation("ReviewsWritten", fields: [reviewerId], references: [id])
}

model Skill {
  id    Int         @id @default(autoincrement())
  name  String
  Users UserSkill[]
}

model UserSkill {
  userId           Int
  skillId          Int
  proficiencyLevel String
  Skill            Skill  @relation(fields: [skillId], references: [id])
  User             User   @relation(fields: [userId], references: [id])

  @@id([userId, skillId])
}

model Account {
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               Int
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
